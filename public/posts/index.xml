<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on cmnemoi | Software &amp; ML Engineering</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on cmnemoi | Software &amp; ML Engineering</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 06 Jun 2025 23:16:41 +0200</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Pourquoi vos rebases échouent (et comment les réussir systématiquement) ?</title>
            <link>http://localhost:1313/posts/why-you-fail-rebasing/</link>
            <pubDate>Fri, 06 Jun 2025 23:16:41 +0200</pubDate>
            
            <guid>http://localhost:1313/posts/why-you-fail-rebasing/</guid>
            <description>&lt;p&gt;Le rebase.&lt;br&gt;
C’est sans doute l’une des commandes les plus puissantes de Git — mais aussi l’une des plus faciles à rater.&lt;/p&gt;
&lt;p&gt;Bien maîtrisé, il permet de garder un historique net, lisible, et de faciliter le travail de toute l’équipe.&lt;br&gt;
Mal maîtrisé, il peut semer des conflits, bloquer une pull request, ou même rendre une branche inutilisable.&lt;/p&gt;
&lt;p&gt;Je le sais d’expérience.&lt;br&gt;
Lorsque j’ai commencé à maintenir &lt;a href=&#34;https://gitlab.com/eternaltwin/mush/mush&#34;&gt;&lt;strong&gt;eMush&lt;/strong&gt;&lt;/a&gt;, un jeu en ligne open source que je développe depuis 2022, je n’imaginais pas à quel point le rebase pouvait devenir un art délicat.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Le rebase.<br>
C’est sans doute l’une des commandes les plus puissantes de Git — mais aussi l’une des plus faciles à rater.</p>
<p>Bien maîtrisé, il permet de garder un historique net, lisible, et de faciliter le travail de toute l’équipe.<br>
Mal maîtrisé, il peut semer des conflits, bloquer une pull request, ou même rendre une branche inutilisable.</p>
<p>Je le sais d’expérience.<br>
Lorsque j’ai commencé à maintenir <a href="https://gitlab.com/eternaltwin/mush/mush"><strong>eMush</strong></a>, un jeu en ligne open source que je développe depuis 2022, je n’imaginais pas à quel point le rebase pouvait devenir un art délicat.</p>
<p>C’est en rebasant <strong>interactivement une branche avec plus de 200 commits</strong> que j’ai vraiment appris à le maîtriser.<br>
Depuis, j’ai reviewé <strong>des centaines de pull requests</strong> sur eMush — et j’ai vu revenir, encore et encore, les mêmes erreurs de rebase.</p>
<p>Le plus étonnant ?<br>
Le piège le plus courant n’est pas celui qu’on croit.</p>
<p>Mais d’abord, voyons pourquoi tant de rebases tournent mal.</p>
<hr>
<h2 id="pourquoi-tant-de-rebases-échouent-">Pourquoi tant de rebases échouent ?</h2>
<p>Rebaser une branche semble trivial : <em>« je mets ma branche à jour, je pousse, et c’est réglé. »</em><br>
En pratique, trois écueils guettent tout développeur un peu pressé — ou mal outillé.</p>
<hr>
<h3 id="1-rebaser-sur-la-mauvaise-branche">1️⃣ Rebaser sur la mauvaise branche</h3>
<p>Le réflexe est vite pris.<br>
On est sur <code>develop</code>, on tape machinalement :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git rebase develop
</span></span></code></pre></div><p>Problème : on vient de rebaser <code>develop</code> sur lui-même.
Aucun effet — ou pire, un historique bancal si le <code>develop</code> local n’était pas à jour.</p>
<p>👉 <strong>Solution</strong> : toujours se positionner sur sa branche de feature avant de lancer le rebase.</p>
<hr>
<h3 id="2-rebaser-sur-un-develop-obsolète">2️⃣ Rebaser sur un <code>develop</code> obsolète</h3>
<p>C’est le piège le plus insidieux.</p>
<p>Vous êtes sur votre branche, vous tapez :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git rebase develop
</span></span></code></pre></div><p>Mais quand avez-vous mis à jour votre <code>develop</code> ?
Si vous ne l’avez pas synchronisé récemment, vous risquez de rebaser sur une version périmée.
Résultat : des conflits imprévus, un historique incohérent.</p>
<p>👉 <strong>Solution</strong> : rebaser directement sur <code>origin/develop</code>, pour s’assurer de travailler sur la version la plus récente.</p>
<hr>
<h3 id="3-pousser-via-une-interface-graphique">3️⃣ Pousser via une interface graphique</h3>
<p>Et voici, sans doute, <strong>le piège le plus courant et le plus surprenant</strong> — celui que j’ai mis le plus longtemps à identifier.</p>
<p>Personnellement, j’ai toujours effectué mes pushs en ligne de commande, sans problème.
Mais pendant <strong>près de trois ans</strong>, je voyais régulièrement des contributeurs expérimentés produire des historiques incohérents après un rebase.
Je ne comprenais pas pourquoi.</p>
<p>La cause ?
Beaucoup utilisaient le bouton <em>« Push »</em> de leur IDE après un rebase (VSCode, PHPStorm, etc).
Or ces interfaces graphiques gèrent mal les pushs forcés nécessaires après un rebase — elles peuvent produire un push partiel, ou recréer des commits en double.</p>
<p>👉 Depuis que j’ai compris ce point, je le souligne systématiquement : <strong>après un rebase, le push doit impérativement se faire en ligne de commande.</strong></p>
<hr>
<h2 id="la-méthode-inratable">La méthode inratable</h2>
<p>Voici le rituel que j’applique désormais sur tous mes projets — et que je recommande à tous les contributeurs d’eMush :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git fetch
</span></span><span style="display:flex;"><span>git checkout ma-branche
</span></span><span style="display:flex;"><span>git rebase origin/develop
</span></span><span style="display:flex;"><span>git push --force-if-includes --force-with-lease
</span></span></code></pre></div><p>Pourquoi cette séquence ?</p>
<ul>
<li><code>git fetch</code> : synchronise les branches locales avec le serveur.</li>
<li><code>git checkout ma-branche</code> : se positionner sur la branche cible.</li>
<li><code>git rebase origin/develop</code> : rebaser sur la version la plus récente de <code>develop</code>.</li>
<li><code>git push --force-if-includes --force-with-lease</code> : pousser de manière sécurisée, sans risquer d’écraser le travail des autres.</li>
</ul>
<hr>
<h2 id="pourquoi-cette-rigueur-est-essentielle-en-open-source">Pourquoi cette rigueur est essentielle en open source</h2>
<p>Sur un projet personnel, un rebase mal exécuté n’a souvent qu’un impact local.
Sur un projet open source ou propriétaire, c’est une autre histoire.</p>
<p>Un mauvais rebase peut bloquer des pull requests, compliquer la relecture de code, ou perturber le travail des autres contributeurs.
Maintenir un historique clair est un <strong>signe de professionnalisme</strong>, et un véritable atout pour toute l’équipe.</p>
<hr>
<h2 id="en-résumé">En résumé</h2>
<p><strong>Trois pièges fréquents :</strong></p>
<p>1️⃣ Rebaser sur la mauvaise branche</p>
<p>2️⃣ Rebaser sur un <code>develop</code> obsolète</p>
<p>3️⃣ Pousser via une interface graphique</p>
<p><strong>Une méthode fiable :</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git fetch
</span></span><span style="display:flex;"><span>git checkout ma-branche
</span></span><span style="display:flex;"><span>git rebase origin/develop
</span></span><span style="display:flex;"><span>git push --force-if-includes --force-with-lease
</span></span></code></pre></div><hr>
<h2 id="envie-daller-plus-loin-">Envie d’aller plus loin ?</h2>
<p>Si vous souhaitez bénéficier de mon expertise sur Git, l’ingénierie logicielle, le ML engineering ou l’IA générative, n’hésitez pas à me contacter.</p>
<p>Je me ferai un plaisir d’échanger avec vous sur ces sujets — et de vous aider à renforcer vos pratiques.</p>
]]></content>
        </item>
        
    </channel>
</rss>
